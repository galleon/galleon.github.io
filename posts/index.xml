<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tog&#39;s website</title>
    <link>https://galleon.github.io/posts/</link>
    <description>Recent content in Posts on Tog&#39;s website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 May 2021 18:11:14 +0200</lastBuildDate><atom:link href="https://galleon.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Updating my blog</title>
      <link>https://galleon.github.io/posts/building-blog/</link>
      <pubDate>Sat, 01 May 2021 18:11:14 +0200</pubDate>
      
      <guid>https://galleon.github.io/posts/building-blog/</guid>
      <description>I have an extremely small cache memory and it is always a pain to retrieve how to update my blog. So I thought that a blog post on how to update my blog could be useful. Let&amp;rsquo;s start.
First create a new post:
cd blog; hugo new posts/my-new-post.md With your preferred text editor, add some interesting content. You can keep only a basic header as below.
+++ draft = true date = 2021-05-01T18:11:14+02:00 title = &amp;#34;My new blog post&amp;#34; tags = [&amp;#39;hugo&amp;#39;, &amp;#39;blog&amp;#39;] categories = [&amp;#39;coding&amp;#39;] +++ Then, test it using:</description>
    </item>
    
    <item>
      <title>Docker Basics</title>
      <link>https://galleon.github.io/posts/docker-basics/</link>
      <pubDate>Sat, 01 May 2021 17:41:14 +0200</pubDate>
      
      <guid>https://galleon.github.io/posts/docker-basics/</guid>
      <description>It has been quite a while!
Some quick recipes on using Docker.
Quite often, I need to test few thing in a controlled environment, nothing is easier than starting a virtual machine in interactive mode. For example, you can do:
docker run -v $(pwd):/root -it ubuntu:latest /bin/bash This command will:
 run docker interactively (you will get a pseudo-tty with stdin) start an Ubuntu image mount the current directory in /root the container will be automatically removed if existing  </description>
    </item>
    
    <item>
      <title>Lets Start</title>
      <link>https://galleon.github.io/posts/lets-start/</link>
      <pubDate>Sun, 03 Nov 2019 20:14:31 +0100</pubDate>
      
      <guid>https://galleon.github.io/posts/lets-start/</guid>
      <description>In the past, I have authored a number of blogs mainly to store tips and tricks that I found useful. I recently discovered Hugo a well known framework for static web pages. I decided to give it a go by connecting it to Github. Each post is automatically published when pushed in the repository. Travis is used to transform the markdown based sources in html static files. My goals with these pages is not different from my previous attemps, I will use them to report things that do resonate for me.</description>
    </item>
    
    <item>
      <title>Show me my gist</title>
      <link>https://galleon.github.io/posts/my-second-post/</link>
      <pubDate>Sat, 02 Nov 2019 20:24:14 +0100</pubDate>
      
      <guid>https://galleon.github.io/posts/my-second-post/</guid>
      <description>Sometimes it is useful to include a gist in your post.
{{&amp;lt; gist galleon c4e20d3bd5e19312ace7fd972b6a4789 &amp;gt;}} will give you this
 That&amp;rsquo;s all folks</description>
    </item>
    
    <item>
      <title>Embedding a chart in your posts</title>
      <link>https://galleon.github.io/posts/my-first-post/</link>
      <pubDate>Fri, 01 Nov 2019 11:21:27 +0100</pubDate>
      
      <guid>https://galleon.github.io/posts/my-first-post/</guid>
      <description>Just in case you want to add some kind of schema in your blog like this one
  mermaid.initialize({ theme: &#39;dark&#39;, themeCSS: &#39;&#39;, cloneCssStyles: false, useMaxWidth: true, htmlLabels: false, flowchart: { curve: &#39;basis&#39; }	});   mermaid.initialize({ theme: &#39;dark&#39;, themeCSS: &#39;&#39;, cloneCssStyles: false, useMaxWidth: true, htmlLabels: false, flowchart: { curve: &#39;basis&#39; }	});  graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  Just do:</description>
    </item>
    
  </channel>
</rss>
